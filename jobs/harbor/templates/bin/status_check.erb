#!/bin/sh

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

HARBOR_JOB_DIR=/var/vcap/jobs/harbor
CFG_FILE=${HARBOR_JOB_DIR}/config/harbor.cfg
DOCKER_PACKAGE_DIR=${HARBOR_JOB_DIR}/packages/docker
RUN_DIR=/var/vcap/sys/run/harbor
PIDFILE=${RUN_DIR}/harbor.pid
DAEMON_SOCK=${RUN_DIR}/dockerd.sock

export PATH=$PATH:${DOCKER_PACKAGE_DIR}/bin

Timestamp=`date '+%Y-%m-%d %H:%M:%S'`

#Exit function with pid file deletion
myExit() {
	echo "$Timestamp Harbor status check: [FAILED]"
	rm -f $PIDFILE
	exit $1
}

#Check the status of Harbor containers
if docker -H "unix://$DAEMON_SOCK" ps --filter "status=restarting" | grep 'vmware'; then
	myExit 1
fi

#Check the API
harbor_url=<%= p("hostname", spec.ip) %>
protocol=<%= p("ui_url_protocol") %>

curl_command="curl"
if [ "$protocol" = "https" ]; then
	curl_command="$curl_command -k"
fi

set +e

echo "${curl_command} ${protocol}://${harbor_url}/api/systeminfo"
url=`${curl_command} ${protocol}://${harbor_url}/api/systeminfo | python -c "import sys, json; print json.load(sys.stdin)['registry_url']"`
if [ $? != 0 ] ; then
	myExit 2
fi

if [ "$harbor_url" != "$url" ]; then
	myExit 3
fi

#Check docker registry
password=<%= p("admin_password") %>
login=$(docker -H "unix://$DAEMON_SOCK" login -u admin -p $password $harbor_url)
if [ $? != 0 ] ; then
  echo $login | grep -q "unauthorized"
  if [ $? != 0 ] ; then
    myExit 4
  fi
fi

echo "$Timestamp Harbor status check: [PASSED]"
exit 0
