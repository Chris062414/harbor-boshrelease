#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables
set -o pipefail

JOB_NAME=harbor
RUN_DIR=/var/vcap/sys/run
HARBOR_RUN_DIR=$RUN_DIR/$JOB_NAME
LOG_DIR=/var/vcap/sys/log/$JOB_NAME
HARBOR_JOB_DIR=/var/vcap/jobs/$JOB_NAME
PIDFILE=${HARBOR_RUN_DIR}/harbor.pid
PACKAGE_DIR=/var/vcap/packages
HARBOR_PACKAGE_DIR=${PACKAGE_DIR}/harbor-app
COMPOSE_PACKAGE_DIR=${PACKAGE_DIR}/docker-compose
DOCKER_PACKAGE_DIR=${PACKAGE_DIR}/docker
HARBOR_YAML=${HARBOR_PACKAGE_DIR}/docker-compose.yml
HARBOR_CLAIR_YAML=${HARBOR_PACKAGE_DIR}/docker-compose.clair.yml
HARBOR_NOTARY_YAML=${HARBOR_PACKAGE_DIR}/docker-compose.notary.yml
IMAGES_TAR_PATH=${HARBOR_PACKAGE_DIR}/harbor*.tar.gz

CTL_CMD=/sbin/start-stop-daemon
COMPOSE_CMD=${COMPOSE_PACKAGE_DIR}/bin/docker-compose
DAEMON_SOCK=${RUN_DIR}/docker/dockerd.sock
DOCKER_HOST="unix://$DAEMON_SOCK"
DOCKER_CMD="${DOCKER_PACKAGE_DIR}/bin/docker -H $DOCKER_HOST"
CRON_PATH=/etc/cron.d/$JOB_NAME

HARBOR_DATA=/data
HARBOR_DB_BACKUP_DIR=$HARBOR_DATA/db_backup
HARBOR_DB_PWD="<%= p("db_password") %>"

exec 1>> $LOG_DIR/ctl.stdout.log
exec 2>> $LOG_DIR/ctl.stderr.log

source $PACKAGE_DIR/harbor-common/common.sh
source $HARBOR_JOB_DIR/bin/properties.sh

#Start the harbor process
#Require options parameter for $COMPOSE_CMD
startHarbor() {
  $CTL_CMD --pidfile $PIDFILE \
  --make-pidfile \
  --background \
  --exec $COMPOSE_CMD \
  --start \
  -- $1 \
  >> $LOG_DIR/$JOB_NAME.stdout.log \
  2>> $LOG_DIR/$JOB_NAME.stderr.log
}

#Check the status of harbor(docker-compose) process
checkHarbor() {
  $CTL_CMD --pidfile $PIDFILE --exec $COMPOSE_CMD --status
  return $?
}

#Stop the harbor process
#Require options parameter for $COMPOSE_CMD
stopHarbor() {
  if $COMPOSE_CMD $1 || $CTL_CMD --pidfile $PIDFILE --retry TERM/30/QUIT/5/KILL --oknodo --stop; then
    rm -f $PIDFILE
  fi
}

#Load images
loadImages() {
  $DOCKER_CMD load -i ${IMAGES_TAR_PATH}
}

#Upgrade Harbor if higher version of Harbor Bosh Release to be deployed
upgradeHarbor() {
  log "Backing up Harbor database"
  $DOCKER_CMD run -i --rm -e DB_USR=root -e DB_PWD=$HARBOR_DB_PWD -v /data/database:/var/lib/mysql -v $HARBOR_DB_BACKUP_DIR:/harbor-migration/backup vmware/harbor-db-migrator:$HARBOR_VERSION backup
  log "Migrating Harbor database"
  $DOCKER_CMD run -i --rm -e SKIP_CONFIRM=y -e DB_USR=root -e DB_PWD=$HARBOR_DB_PWD -v /data/database:/var/lib/mysql vmware/harbor-db-migrator:$HARBOR_VERSION upgrade head
}

#Enable status checking script
#Check with 5 minutes interval
cronJobUp() {
  CHECK_SCRIPT_PATH=${HARBOR_JOB_DIR}/bin/status_check
  echo "*/5 * * * * root ${CHECK_SCRIPT_PATH} > $LOG_DIR/cron.log 2>&1" > $CRON_PATH
}

#Stop the cron job
cronJobDown() {
  rm -f $CRON_PATH
}

#Build compose options
COMPOSE_OPTS="-H $DOCKER_HOST -f ${HARBOR_YAML}"
if [ -n "$WITH_NOTARY" ]; then
  COMPOSE_OPTS="${COMPOSE_OPTS} -f ${HARBOR_NOTARY_YAML}"
fi

if [ -n "$WITH_CLAIR" ]; then
  COMPOSE_OPTS="${COMPOSE_OPTS} -f ${HARBOR_CLAIR_YAML}"
fi

case $1 in

  start)
    log "Starting Harbor $HARBOR_FULL_VERSION at ${HARBOR_PROTOCOL}://${HARBOR_HOSTNAME}"

    #TODO: Add image cleaning here if do migration
    log "Loading docker images ..."
    loadImages

    #The 1st Harbor Bosh Release for PKS does not need to upgrade from old version.
    log "Upgrading Harbor if not upgraded yet ..."
    upgradeHarbor

    log "Launching docker-compose up ..."
    COMPOSE_OPTS="${COMPOSE_OPTS} up"
    startHarbor "$COMPOSE_OPTS"

    log "Cron job for status checking up"
    cronJobUp
    ;;

  stop)
    log "Stopping Harbor ..."
    COMPOSE_OPTS="${COMPOSE_OPTS} down"
    stopHarbor "$COMPOSE_OPTS"

    log "Cron job for status checking down"
    cronJobDown
    #TODO: Add instance clean work here if migration is enabled
    ;;

  *)
    log -n "Usage: ctl {start|stop}"
    ;;

esac

log "Successfully done!"
exit 0