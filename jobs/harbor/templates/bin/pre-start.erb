#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables
set -x

#Make sure folders are ready
RUN_DIR=/var/vcap/sys/run/harbor
LOG_DIR=/var/vcap/sys/log/harbor
HARBOR_JOB_DIR=/var/vcap/jobs/harbor
HARBOR_PACKAGE_DIR=${HARBOR_JOB_DIR}/packages/harbor-app
COMPOSE_PACKAGE_DIR=${HARBOR_JOB_DIR}/packages/docker-compose
DOCKER_PACKAGE_DIR=${HARBOR_JOB_DIR}/packages/docker
IMAGES_TAR_PATH=${HARBOR_PACKAGE_DIR}/harbor*.tar.gz
DOCKER_DATA_DIR=/var/vcap/data/docker
HARBOR_DATA=/data
CFG_FILE=${HARBOR_JOB_DIR}/config/harbor.cfg

source /var/vcap/packages/common/generateCerts.sh

export PATH=$PATH:${DOCKER_PACKAGE_DIR}/bin
export PATH=$PATH:${COMPOSE_PACKAGE_DIR}/bin

for dir in $RUN_DIR $LOG_DIR $HARBOR_DATA ; do
  mkdir -p ${dir}
  chown vcap:vcap ${dir}
  chmod 755 ${dir}
done

exec 1>> $LOG_DIR/pre-start.stdout.log
exec 2>> $LOG_DIR/pre-start.stderr.log

echo $PATH

#cgroups mount point settings
if grep -v '^#' /etc/fstab | grep -q cgroup || [ ! -e /proc/cgroups ] || [ ! -d /sys/fs/cgroup ]; then
  mkdir -p /sys/fs/cgroup
fi
if ! mountpoint -q /sys/fs/cgroup; then
  mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
fi
(cd /sys/fs/cgroup
 for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
   mkdir -p $sys
   if ! mountpoint -q $sys; then
     if ! mount -n -t cgroup -o $sys cgroup $sys; then
       rmdir $sys || true
     fi
   fi
done)
echo "Successfully set cgroup mount point"

#Start docker daemon
dockerd -g ${DOCKER_DATA_DIR} >/dev/null 2>&1 &
while [[ ! -e /var/run/docker.sock ]]; do
  sleep 1
done
echo "Successfully start Docker daemon"

#Load docker images
if [ -f ${IMAGES_TAR_PATH} ] ; then
  docker load -i ${IMAGES_TAR_PATH}
  if [[ $? != 0 ]] ; then
  	echo "Failed to load docker images from ${IMAGES_TAR_PATH}"
  	exit 1
  else
  	echo "Load docker images from ${IMAGES_TAR_PATH} successfully"
  fi
else
  echo "${IMAGES_TAR_PATH} does not exist"
  exit 2
fi

# Cat out the harbor.cfg file content
cat ${CFG_FILE}

#Copy cert to the right place
mkdir -p $HARBOR_DATA/cert

<% if_p("harbor.ssl.cert", "harbor.ssl.key") do |cert, key| %>
cp ${HARBOR_JOB_DIR}/tls/server.crt $HARBOR_DATA/cert/
cp ${HARBOR_JOB_DIR}/tls/server.key $HARBOR_DATA/cert/
<% end.else do %>
HARBOR_HOST_IP=
if [[ $(grep 'hostname[[:blank:]]*=' ${CFG_FILE}) =~ hostname[[:blank:]]*=[[:blank:]]*(.*) ]]; then
  HARBOR_HOST_IP=${BASH_REMATCH[1]}
fi

generateCerts $HARBOR_HOST_IP <%= p("harbor.ssl.self_sign.location") %> <%= p("harbor.ssl.self_sign.orgnization") %> <%= p("harbor.ssl.self_sign.cn_ca") %> <%= p("harbor.ssl.self_sign.cn_cert") %>

mv $HARBOR_HOST_IP.crt $HARBOR_DATA/cert/server.crt
mv $HARBOR_HOST_IP.key $HARBOR_DATA/cert/server.key

mkdir -p $HARBOR_DATA/ca_download
mv harbor_ca.crt $HARBOR_DATA/ca_download/ca.crt
<% end %>

#Prepare Harbor env
${HARBOR_PACKAGE_DIR}/prepare --conf ${CFG_FILE} --with-notary --with-clair
if [[ $? != 0 ]] ; then
  echo "Failed to prepare Harbor environment"
  exit 3
else
  echo "Prepare Harbor environment successfully"
fi

#Workaround to resolve the docker-compose libz issue
sudo mount /tmp -o remount,exec

exit 0