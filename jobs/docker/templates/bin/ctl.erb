#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables
set -x

JOB_NAME=docker
RUN_DIR="/var/vcap/sys/run/${JOB_NAME}"
LOG_DIR="/var/vcap/sys/log/${JOB_NAME}"
JOB_DIR="/var/vcap/jobs/${JOB_NAME}"
PACKAGE_DIR=/var/vcap/packages
DOCKER_PACKAGE_DIR=${PACKAGE_DIR}/docker
DAEMON_PIDFILE=${RUN_DIR}/dockerd.pid
DAEMON_SOCK=${RUN_DIR}/dockerd.sock

export PATH=$PATH:${DOCKER_PACKAGE_DIR}/bin

CTL_CMD=/sbin/start-stop-daemon
DOCKERD_CMD=${DOCKER_PACKAGE_DIR}/bin/dockerd
DOCKER_HOST="unix://$DAEMON_SOCK"

exec 1>> $LOG_DIR/ctl.stdout.log
exec 2>> $LOG_DIR/ctl.stderr.log

source $JOB_DIR/bin/properties.sh

#Start docker daemon
startDockerd() {
  OPT="--data-root ${DATA_ROOT_DIR} --host $DOCKER_HOST"

  $CTL_CMD --pidfile $DAEMON_PIDFILE \
  --make-pidfile \
  --background \
  --exec $DOCKERD_CMD \
  --start \
  -- $OPT \
  >> $LOG_DIR/dockerd.stdout.log \
  2>> $LOG_DIR/dockerd.stderr.log
}

#Stop the dockerd process
stopDockerd() {
  $CTL_CMD --pidfile $DAEMON_PIDFILE --retry TERM/30/QUIT/5/KILL --oknodo --stop
  RET=$?
  if [ RET == 0 ]; then
    rm -f $DAEMON_PIDFILE
    rm -f $DAEMON_SOCK
  fi

  return $RET
}

case $1 in

  start)
    if [ ! -d $DATA_ROOT_DIR ]; then
      mkdir -p $DATA_ROOT_DIR
      chmod 770 $DATA_ROOT_DIR
    fi

    echo "Starting docker daemon..."
    startDockerd
    ;;

  stop)
    echo "Stopping docker containers..."
    containers="$(docker -H $DOCKER_HOST ps -q)"
    if [[ ! -z $containers ]]; then
      for container in $containers
        do
          echo "Stopping docker container ${container}"
          docker -H $DOCKER_HOST stop ${container}
        done
    fi

    echo "Stopping docker daemon"
    stopDockerd
    ;;

  *)
    echo -n "Usage: ctl {start|stop}"
    ;;

esac
echo "Successfully done!"
exit 0